Pass
{
	Tags{"LightMode" = "LightweightForward"}
	${Tags}
	${Blending}
	${Culling}
	${ZTest}
	${ZWrite}
	
	HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
    #pragma multi_compile _ UNITY_SINGLE_PASS_STEREO STEREO_INSTANCING_ENABLE STEREO_MULTIVIEW_ENABLE
    #pragma multi_compile_fog

	#pragma vertex vert
    #pragma fragment frag

    // Lighting include is needed because of GI
    #include "LWRP/Shaders/LightweightShaderLibrary/Core.hlsl"
    #include "LWRP/Shaders/LightweightShaderLibrary/Lighting.hlsl"
    #include "CoreRP/ShaderLibrary/Color.hlsl"
    #include "ShaderGraphLibrary/Functions.hlsl"

    ${Defines}

    ${Graph}

    struct GraphVertexOutput
    {
        float4 position : POSITION;
        ${Interpolators}
    };

    GraphVertexOutput vert (GraphVertexInput v)
	{
	    v = PopulateVertexData(v);
		
        GraphVertexOutput o;
        o.position = TransformObjectToHClip(v.vertex.xyz);
        ${VertexShader}
        return o;
	}

    half4 frag (GraphVertexOutput IN) : SV_Target
    {
    	${LocalPixelShader}
    	
        SurfaceInputs surfaceInput;
        ${SurfaceInputs}

        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
        float3 Color = 0;
        float Alpha = 0;
		${SurfaceOutputRemap}
		
    	return half4(Color, Alpha);
    }
    ENDHLSL
}
